/**
 * @license
 * (c) Copyright 2023 Grammarly, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Identifier used to authenticate with Grammarly.
 *
 * @public
 */
declare type ClientId = string;

/**
 * Configuration to customize the Grammarly integration. Used by `init()` and the `<Grammarly>` component in React and Vue integrations.
 *
 * @remarks
 * See {@link EditorConfig} to customize per editor instance.
 *
 * @public
 * @since v1.6.3
 */
declare type Config = Pick<EditorConfig, "documentDialect" | "documentDomain" | "introText" | "oauthRedirectUri" | "suggestionCategories" | "autocomplete" | "toneDetector" | "userFeedback">;

/**
 * Specific variety of English being written.
 *
 * @remarks
 *
 * In addition to `"american"`, `"australian"`, `"british"`, `"canadian"`, and `"indian"` English, you can set the following values:
 *
 * - `"auto-browser"`: Chooses an appropriate dialect based on the user's browser settings. This is the default value.
 *
 * - `"auto-text"`: Chooses an appropriate dialect based on the user's written text.
 *
 * Note that the user can override this setting in the Grammarly button menu.
 *
 * For more information, see {@link https://support.grammarly.com/hc/en-us/articles/115000089992-Select-between-British-English-American-English-Canadian-English-and-Australian-English | this article} for differences.
 *
 * Used by {@link Config} and {@link EditorConfig}.
 *
 * @public
 */
declare type Dialect = 
/** @since v1.3.0 */
"auto-browser" | "american" | "australian" | "british" | "canadian" | "indian"
/** @since v1.3.0 */
| "auto-text";

/**
 * Statistics about the user-entered text. {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-react-stats | Try it now}.
 *
 * @remarks
 * `DocumentStats` is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
 *
 * @public
 * @since v1.9.0
 */
declare interface DocumentStats {
    /** Current number of characters, including whitespace. */
    charsCount: number;
    /** Current number of words. */
    wordsCount: number;
    /** Current number of suggestions. */
    suggestionsCount: number;
    /**
     * Readability score using the {@link https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests#Flesch_reading_ease|Flesch reading-ease test}.
     *
     * Higher scores indicate material that is easier to read.
     * The range for typical text is 0â€“100, but we surface the exact score, even if lower or higher.
     * @remarks readabilityScore should only be used with longer texts.
     */
    readabilityScore: number;
    /** Expected time needed by an average reader to read the text (250 wpm). */
    readingTime: Time;
    /** Expected time needed by an average speaker to speak the text aloud (130 wpm). */
    speakingTime: Time;
}

/**
 * The style or type of writing to be analyzed.
 *
 * @remarks
 *
 * You can select the style of the document that best corresponds to the type of writing you're analyzing in order to get the most accurate and relevant suggestions:
 *
 *  - **`academic`:** Designed to analyze text against stricter, academic writing criteria.
 *
 *  - **`business`:** Designed to analyze text against formal writing criteria.
 *
 *  - **`general`:** Designed for a medium level of strictness. This is the default domain.
 *
 *  - **`mail`:** Designed to help ensure that your email communication is engaging.
 *
 *  - **`casual`:** Designed for informal types of writing and ignores most style issues.
 *
 *  - **`creative`:** Designed to intentionally bend grammar rules to achieve certain effects.
 *
 * For more information, see {@link https://support.grammarly.com/hc/en-us/articles/115000091472-What-is-domain-document-type- | What is domain/document type?}
 *
 * Used by {@link Config} and {@link EditorConfig}.
 *
 * @public
 */
declare type Domain = "academic" | "business" | "general" | "mail" | "casual" | "creative";

/**
 * An instance of Editor represents an HTML editor from your app enhanced with Grammarly.
 *
 * See {@link EditorConfig} to customize per editor instance.
 *
 * @example
 * ```js
 * // returns instance of GrammarlyEditorPluginElement
 * const grammarlyPluginElement = Grammarly.addPlugin(document.querySelector("textarea"));
 * ```
 *
 * @public
 */
declare class Editor {



    /**
     * Returns the GrammarlyEditorPlugin element directly if you need to
     * connect to it after the DOM has changed.
     *
     * @public
     * @since v1.7.5
     */
    get element(): GrammarlyEditorPluginElement;

    /**
     * Current editor configuration
     *
     * @public
     * @since v1.6.3
     */
    get config(): EditorConfig;
    /**
     * Update editor configuration by merging new configuration with current configuration.
     *
     * @remarks Setting a property to `undefined` would remove it, e.g., `setConfig({ documentDialect: undefined })` would remove configured dialect.
     *
     * @param config - new editor configuration
     */
    setConfig(config: EditorConfig): void;
    /**
     * Close Grammarly connection and clean up any state.
     * @public
     */
    disconnect(): void;
}

/**
 * Configuration to customize the Grammarly integration per `Editor` instance.
 *
 * @public
 */
declare interface EditorConfig {
    /**
     * Which English dialect should be assumed?
     *
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-document-dialect?file=/public/index.html | Try it now}
     * @defaultValue "auto-browser"
     * @since v1.6.3
     * @public
     */
    documentDialect?: Dialect;
    /**
     * What is the style or type of writing?
     *
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-document-domain?file=/public/index.html | Try it now}
     * @defaultValue "general"
     * @since v1.6.3
     * @public
     */
    documentDomain?: Domain;
    /**
     * Categories of suggestions that can be muted.
     *
     * @remarks Muting suggestion categories is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-suggestions-config?file=/public/index.html | Try it now}
     * @public
     */
    suggestionCategories?: SuggestionCategories;
    /**
     * Collect user feedback after the user takes action on 5 suggestions.
     *
     * We will not request feedback more than once in a 30 day period.
     *
     * @remarks User feedback is required for the Free plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     * @defaultValue "on"
     * @public
     * @since v1.8.3
     */
    userFeedback?: "on" | "off";
    /**
     * Text shown to introduce first-time users to Grammarly.
     *
     * This introductory text shows in the footer of suggestion cards until the user first accepts
     * or dismisses a suggestion.
     *
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-intro-text?file=/public/index.html | Try it now}
     * @defaultValue "Grammarly helps you write clearly and mistake-free."
     * @since v1.6.3
     * @public
     */
    introText?: string;
    /**
     * Show the tone detector interface (beside the Grammarly button).
     *
     * Note that tone detection requires a text of at least 150 characters.
     *
     * @remarks Tone detector is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     * @defaultValue "off"
     * @public
     * @since v1.8.3
     */
    toneDetector?: "on" | "off";
    /**
     * Offer to complete phrases for your users as they type. {@link https://developer.grammarly.com/docs/autocomplete | Learn more}
     *
     * Autocomplete is not currently supported for `<input>` fields.
     *
     * If you have a Content Security Policy (CSP), you will need to update it as described
     * {@link https://developer.grammarly.com/docs/faq#how-do-i-add-grammarly-to-my-content-security-policy-csp | here}.
     *
     * @remarks Autocomplete is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     * @demo {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-autocomplete?file=/public/index.html | Try it now}
     * @defaultValue "off"
     * @public
     * @since v1.7.0
     */
    autocomplete?: "on" | "off";
    /**
     * URI to redirect to after successful account connection.
     *
     * @public
     * @since v1.6.3
     */
    oauthRedirectUri?: string;

    /**
     * Show suggestion cards when a user hovers over a suggestion underline.
     *
     *
     * @defaultValue "on"
     * @public
     * @since v1.9.0
     */
    suggestionCards?: "on" | "off";
    /**
     * Show underlines for suggestions.
     *
     * @defaultValue "on"
     * @public
     * @since v1.9.2
     */
    underlines?: "on" | "off";
    /**
     * Activation strategy used by the Editor Plugin
     *
     * - focus: Plugin activates once the text field is focused
     *
     * - immediate: Plugin activates immediately
     *
     * @defaultValue "focus"
     * @public
     * @since v2.0.0
     */
    activation?: "focus" | "immediate";
}

/**
 * @public
 *
 * Overall API for the Editor SDK which can be used to create an {@link Editor}, which represent HTML editors enhanced with Grammarly.
 *
 * @example
 * ```js
 * const Grammarly = await init("YOUR_CLIENT_ID");
 * const grammarlyPluginElement = Grammarly.addPlugin(document.querySelector("textarea"));
 * ```
 */
declare class EditorSDK {



    /**
     * Enhance a specific HTML element with Grammarly.
     *
     * @param element - Element to be enhanced
     * @param config - Optional {@link EditorConfig}
     * @param viewport - Parent scrolling element, if different from editor element (since 1.6.7)
     * @returns A {@link GrammarlyEditorPluginElement}
     */
    addPlugin(element: HTMLElement, config?: EditorConfig, viewport?: HTMLElement): GrammarlyEditorPluginElement;

    /**
     * Process OAuth callback and complete account connection.
     *
     * @public
     * @since v1.4.0
     */
    handleOAuthCallback(url: string): Promise<void>;
}

/**
 * `<grammarly-button>` is a web component that allows you to place the Grammarly button
 * in a custom position in your app.
 *
 * The Grammarly button can only display once per page. Its location is set and displayed according to the earliest inclusion of `<grammarly-button>`.
 *
 * @remarks
 * [Learn more](https://developer.grammarly.com/docs/customization#grammarly-button)
 *
 * @public
 */
declare class GrammarlyButtonElement extends HTMLElement {

    private readonly _outlet;
    private readonly _attrs;
    private readonly _cleanup;





    /**
     * The position of the {@link https://developer.grammarly.com/docs/tone | tone detector} (if present) relative to the Grammarly button.
     *
     * @example
     * ```html
     * <grammarly-button tone-position="left"></grammarly-button>
     * ```
     *
     * @defaultValue "left"
     * @public
     */
    get tonePosition(): TonePosition | undefined;
    set tonePosition(value: TonePosition | undefined);
    /**
     * Position of the Grammarly button menu relative to the Grammarly button.
     *
     * @example
     * ```html
     * <grammarly-button menu-position="left"></grammarly-button>
     * ```
     *
     * @defaultValue "left"
     * @since v2.1.0
     * @public
     */
    get menuPosition(): MenuPosition | undefined;
    set menuPosition(value: MenuPosition | undefined);
    private _render;
    /**
     * Upgrade property to prototype getter/setter.
     *
     * @see https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties
     */
    private _upgradeProperty;
}

/** @public */
declare interface GrammarlyEditorPluginCallbacks {

    /**
     * Triggered when a suggestion card is opened.
     * @public
     *
     * @since v1.8.0

     */
    onSuggestionCardOpen?: (event: CustomEvent) => void;
    /**
     * Triggered when a suggestion card is closed.
     * @public
     *
     * @since v1.8.0

     */
    onSuggestionCardClose?: (event: CustomEvent) => void;
    /**
     * Triggered when the user turns off Grammarly.
     * @public
     *
     * @since v1.9.0

     */
    onPluginTurnedOff?: (event: CustomEvent) => void;
    /**
     * Triggered on fatal error with the plugin.
     * @public
     *
     * @since v1.9.0

     */
    onPluginError?: (event: CustomEvent<Error>) => void;
    /**
     * Triggered when new text information is available. This event can be used to track features of text as it is being written.
     * @remarks document-stats is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     *
     *
     * @public
     *
     * @since v1.9.0

     */
    onDocumentStats?: (event: CustomEvent<DocumentStats>) => void;
    /**
     * Triggered when new session information is available. This event can be used to track information about the writing session.
     * @remarks session-stats is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     *
     *
     * @public
     *
     * @since v1.9.0

     */
    onSessionStats?: (event: CustomEvent<SessionStats>) => void;
}

/**
 * `<grammarly-editor-plugin>` is a web component that adds Grammarly suggestions to the HTML element it wraps.
 *
 * @customElement \{ "events": "GrammarlyEditorPluginElementEventMap", "attributes": "Attributes", "file": "packages/plugin-editor/src/WebComponents/GrammarlyEditorPluginElement.tsx", "tsConfigFilePath": "packages/plugin-editor/tsconfig.json" \}
 *
 * @public
 */
declare class GrammarlyEditorPluginElement extends HTMLElement {





    private readonly _logger;






    /**
     * Current editor configuration
     *
     * @example
     * ```html
     * <grammarly-editor-plugin>
     *   <textarea></textarea>
     * </grammarly-editor-plugin>
     * ```
     *
     * ```js
     * const editor = document.querySelector("grammarly-editor-plugin")
     * editor.config = { autocomplete: "on", documentDialect: "british" };
     * ```
     *
     * @public
     */
    get config(): EditorConfig;
    set config(config: EditorConfig);
    get clientId(): ClientId | undefined;
    set clientId(value: ClientId | undefined);


    /**
     * When inserted into the DOM, the GrammarlyEditorPlugin will automatically detect
     * and connect to an editable child element (editor) and its scrollable container
     * (viewport).
     *
     * In rare cases, you may need to override what was automatically detected.
     * This function provides a way to do that by specifying a different editor and viewport.
     *
     * @example
     * See [editor-sdk-tinymce-imperative](https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-tinymce-imperative?file=/public/index.html)
     *
     * @param editor - the editable element
     * @param viewport - scrollable outer element of the editable element
     */
    connect(editor: HTMLInputElement | HTMLTextAreaElement | HTMLElement, viewport?: HTMLElement): void;
    /**
     * Remove plugin from the editor.
     *
     * @public
     * @since v1.9.2
     */
    disconnect(): void;
    addEventListener<K extends keyof GrammarlyEditorPluginElementEventMap>(type: K, listener: (this: HTMLElement, ev: GrammarlyEditorPluginElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
    removeEventListener<K extends keyof GrammarlyEditorPluginElementEventMap>(type: K, listener: (this: HTMLElement, ev: GrammarlyEditorPluginElementEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void;










}

/**
 * Custom events emitted by {@link GrammarlyEditorPluginElement}. {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-events?file=/public/index.html | Try it now}.
 *
 * @remarks
 * See {@link GrammarlyEditorPluginCallbacks} for a list of event listeners.
 *
 * @public
 * @since v1.8.0
 */
declare interface GrammarlyEditorPluginElementEventMap extends HTMLElementEventMap {

    /**
     * Triggered when a suggestion card is opened.
     *
     * @example
     * ```js
     * const editor = document.querySelector("grammarly-editor-plugin");
     * editor.addEventListener("suggestion-card-open", (event) => {
     *  console.log('Suggestion card shown to user');
     * });
     * ```
     *
     * @public
     * @since v1.8.0
     */
    "suggestion-card-open": CustomEvent;
    /**
     * Triggered when a suggestion card is closed.
     *
     * @example
     * ```js
     * const editor = document.querySelector("grammarly-editor-plugin");
     * editor.addEventListener("suggestion-card-close", (event) => {
     *  console.log('Suggestion card closed');
     * });
     * ```
     *
     * @public
     * @since v1.8.0
     */
    "suggestion-card-close": CustomEvent;
    /**
     * Triggered when the user turns off Grammarly.
     *
     * @example
     * ```js
     * const editor = document.querySelector("grammarly-editor-plugin");
     * editor.addEventListener("plugin-turned-off", (event) => {
     *  console.log('Grammarly Editor SDK turned off');
     * });
     * ```
     *
     * @public
     * @since v1.9.0
     */
    "plugin-turned-off": CustomEvent;
    /**
     * Triggered on fatal error with the plugin.
     *
     * @example
     * ```js
     * const editor = document.querySelector("grammarly-editor-plugin");
     * editor.addEventListener("plugin-error", (event) => {
     *  console.log('Grammarly Editor SDK has thrown an error:', event.detail);
     * });
     * ```
     *
     * @public
     * @since v1.9.0
     */
    "plugin-error": CustomEvent<Error>;
    /**
     * Triggered when new text information is available. This event can be used to track features of text as it is being written.
     *
     * @remarks document-stats is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     *
     * @example
     * ```html
     * <div>
     *   Words: <span data-field="wordsCount"></span> &mdash;
     *
     *   Reading time: <span data-field="readingTime"></span> &mdash;
     *
     *   Speaking time: <span data-field="speakingTime"></span> &mdash;
     *
     *   Readability score: <span data-field="readabilityScore"></span>
     * </div>
     * ```
     *
     * ```js
     * const editor = document.querySelector("grammarly-editor-plugin");
     *
     * editor.addEventListener("document-stats", (event) => {
     *  function update(field, format = (value) => value) {
     *    document.querySelector(`[data-field=${field}]`).innerText = format(event.detail[field]);
     *  }
     *  const formatTime =
     *    ({h, m, s}) => `${h}:${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
     *
     *  update('wordsCount');
     *  update('readingTime', formatTime);
     *  update('speakingTime', formatTime);
     *  update('readabilityScore');
     * });
     * ```
     *
     * @public
     * @since v1.9.0
     */
    "document-stats": CustomEvent<DocumentStats>;
    /**
     * Triggered when new session information is available. This event can be used to track information about the writing session.
     *
     * @remarks session-stats is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
     *
     * @example
     * ```html
     * <ul>
     *   <li>Duration: <span data-field="duration"></span> seconds</li>
     *   <li>Suggestions Accepted: <span data-field="suggestionsAccepted"></span></li>
     *   <li>Suggestions Sent: <span data-field="suggestionsSent"></span></li>
     *   <li>Words analyzed: <span data-field="wordsAnalyzed"></span></li>
     * </ul>
     * ```
     *
     * ```js
     * const editor = document.querySelector("grammarly-editor-plugin");
     *
     * editor.addEventListener("session-stats", (event) => {
     *  function update(field, format = (value) => value) {
     *    document.querySelector(`[data-field=${field}]`).innerText = format(event.detail[field]);
     *  }
     *  const formatBreakdown =
     *    ({total}) => total;
     *
     *  update('duration');
     *  update('suggestionsAccepted', formatBreakdown);
     *  update('suggestionsSent', formatBreakdown);
     *  update('wordsAnalyzed');
     * });
     * ```
     *
     * @public
     * @since v1.9.0
     */
    "session-stats": CustomEvent<SessionStats>;
}

/**
 * Initialize Grammarly and start using {@link EditorSDK} to connect editors.
 *
 * @example
 * ```js
 * const Grammarly = await init("YOUR_CLIENT_ID");
 * ```
 *
 * @param clientId - The {@link ClientId} for authentication
 * @param config - The {@link Config} for all the editors
 * @param win - The browser window where Grammarly will be initialized. It can be used to initialize Grammarly in a child window. It defaults to the current window.
 *
 * @public
 */
declare function init(clientId: string, config?: Config, /** @since v1.7.7 */ win?: Window): Promise<EditorSDK>;

/**
 * Initialize Grammarly. The {@link ClientId} must be passed another way.
 *
 * @public
 * @since v1.6.3
 */
declare function init(): Promise<void>;

/**
 * Position of the Grammarly button menu relative to the Grammarly button.
 *
 * @remarks
 * Used by {@link GrammarlyButtonElement}.
 *
 * @since v2.1.0
 * @public
 */
declare type MenuPosition = "left" | "right";

/**
 * Statistics about the Grammarly session.
 *
 * @remarks
 * `SessionStats` is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
 *
 *  @public
 */
declare interface SessionStats {
    /** Duration of the editing session, in seconds. */
    duration: number;
    /**
     * Total words checked during the session.
     *
     * @deprecated NEXT_VERSION - use wordsAnalyzed instead
     */
    wordsChecked: number;
    /** Total words analyzed during the session. */
    wordsAnalyzed: number;
    /** Suggestions provided by Grammarly. */
    suggestionsSent: SessionSuggestionBreakdown;
    /** Suggestions accepted by user. */
    suggestionsAccepted: SessionSuggestionBreakdown;
}

/**
 * Suggestion total along with counts by type. {@link https://codesandbox.io/s/github/grammarly/grammarly-for-developers/tree/main/examples/editor-sdk-react-stats | Try it now}.
 *
 * @remarks
 * Within {@link SessionStats}, used by both `suggestionsAccepted` and `suggestionsSent`.
 *
 * @public
 */
declare interface SessionSuggestionBreakdown {
    /**
     *  The total number of suggestions delivered to your users across all the editors in your application.
     */
    total: number;
    /**
     *  The total number of suggestions delivered for the Correctness category.
     *  @remarks The Correctness category focuses on eliminating grammar, spelling, and punctuation mistakes, and ensuring word choices sound natural and fluent.
     */
    correctness: number;
    /**
     *  The total number of suggestions delivered for the Delivery category.
     *  @remarks The Delivery category focuses on helping end users find the right tone, eliminating hedging language (to sound more confident), and finessing phrases to have more tact and empathy for readers, and supporting respectful and current language practices.
     */
    delivery: number;
    /**
     *  The total number of suggestions delivered for the Clarity category.
     *  @remarks The Clarity category focuses on making every sentence concise and easy to follow, and rewriting hard-to-read sentences.
     */
    clarity: number;
    /**
     *  The total number of suggestions delivered for the Engagement category.
     *  @remarks The Engagement category focuses on choosing the most compelling words, and using varied, engaging sentence structure.
     */
    engagement: number;
}

/**
 * Categories of suggestions that can be muted.
 *
 * @remarks
 * Keep the following rules in mind when muting suggestion categories:
 *
 * - The following categories are turned `"off"` by default: `conjunctionAtStartOfSentence`, `informalPronounsAcademic`, `oxfordComma`, `passiveVoice`, `prepositionAtTheEndOfSentence`, `stylisticFragments`, and `unnecessaryEllipses`.
 *
 * - If a category is set to `"off"`, any suggestions belonging to that category will be muted (not visible to the user).
 *
 * - If a user has connected their Grammarly account to your application, the full set of customized suggestions from their user profile will always take precedence.
 *
 * - Muting suggestion categories is available only on the Plus plan. {@link https://developer.grammarly.com/plans | Learn more} about our plans.
 *
 * Used by {@link Config} and {@link EditorConfig}.
 *
 * @public
 */
declare interface SuggestionCategories {
    /**
     * Suggests alternatives to words that occur frequently in the same paragraph.
     *
     * @defaultValue "on"
     */
    variety?: "on" | "off";
    /**
     * Suggests alternatives to bland and overused words such as "good" and "nice".
     *
     * @defaultValue "on"
     */
    vocabulary?: "on" | "off";
    /**
     * Suggests ways to sound more natural and fluent.
     *
     * @defaultValue "on"
     */
    fluency?: "on" | "off";
    /**
     * Suggests adding the Oxford comma after the second-to-last item in a list of things.
     *
     * @defaultValue "off"
     */
    oxfordComma?: "on" | "off";
    /**
     * Flags unnecessary use of ellipses (...).
     *
     * @defaultValue "off"
     */
    unnecessaryEllipses?: "on" | "off";
    /**
     * Suggests placing punctuation before closing quotation marks.
     *
     * @defaultValue "on"
     */
    punctuationWithQuotation?: "on" | "off";
    /**
     * Suggests completing all incomplete sentences, including stylistic sentence fragments that may be intentional.
     *
     * @defaultValue "off"
     */
    stylisticFragments?: "on" | "off";
    /**
     * Flags use of personal pronouns such as "I" and "you" in academic writing.
     *
     * @defaultValue "off"
     */
    informalPronounsAcademic?: "on" | "off";
    /**
     * Flags use of conjunctions such as "but" and "and" at the beginning of sentences.
     *
     * @defaultValue "off"
     */
    conjunctionAtStartOfSentence?: "on" | "off";
    /**
     * Flags use of prepositions such as "with" and "in" at the end of sentences.
     *
     * @defaultValue "off"
     */
    prepositionAtTheEndOfSentence?: "on" | "off";
    /**
     * Suggests rewriting split infinitives so that an adverb doesn't come between "to" and the verb.
     *
     * @defaultValue "on"
     */
    splitInfinitive?: "on" | "off";
    /**
     * Suggests adding missing spacing after a numeral when writing times.
     *
     * @defaultValue "on"
     */
    missingSpaces?: "on" | "off";
    /**
     * Flags use of passive voice.
     *
     * @defaultValue "off"
     */
    passiveVoice?: "on" | "off";
    /**
     * Flags long, complicated sentences that could potentially confuse your reader.
     *
     * @defaultValue "on"
     */
    readabilityFillerWords?: "on" | "off";
    /**
     * Suggests splitting long, complicated sentences that could potentially confuse your reader.
     *
     * @defaultValue "on"
     */
    readabilityTransforms?: "on" | "off";
    /**
     * Suggests using person-first language to refer respectfully to an individual with a disability.
     *
     * @defaultValue "on"
     */
    personFirstLanguage?: "on" | "off";
    /**
     * Suggests alternatives to potentially gender-biased and non-inclusive phrasing.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageGenderRelated?: "on" | "off";
    /**
     * Flags LGBTQIA+-related terms that may be seen as biased, outdated, or disrespectful in some contexts.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageLGBTQIARelated?: "on" | "off";
    /**
     * Suggests alternatives to language that may be considered politically incorrect.
     *
     * @defaultValue "on"
     */
    possiblyPoliticallyIncorrectLanguage?: "on" | "off";
    /**
     * Suggests alternatives to potentially biased language related to race and ethnicity.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageRaceEthnicityRelated?: "on" | "off";
    /**
     * Suggests alternatives to potentially biased language related to older adults.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageAgeRelated?: "on" | "off";
    /**
     * Suggests alternatives to potentially ableist language.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageDisabilityRelated?: "on" | "off";
    /**
     * Suggests alternatives to potentially biased language related to parenting and family systems.
     *
     * @example
     * Quinn hoped to meet their \{ real father  =\> birth father \} one day.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageFamilyRelated?: "on" | "off";
    /**
     * Suggests spelling out numbers zero through ten.
     *
     * @defaultValue "on"
     */
    numbersZeroThroughTen?: "on" | "off";
    /**
     * Suggests spelling out numbers at the beginning of sentences.
     *
     * @defaultValue "on"
     */
    numbersBeginningSentences?: "on" | "off";
    /**
     * Flags a series of nouns that modify a final noun.
     *
     * @example
     * The \{store manager policy handbook update meeting \} is tomorrow.
     *
     * @defaultValue "on"
     */
    nounStrings?: "on" | "off";
    /**
     * Flags series of sentences that follow the same pattern.
     *
     * @example
     * I read an interesting book recently. It was about computers. I usually read novels.
     *
     * @defaultValue "on"
     */
    sentenceVariety?: "on" | "off";
    /**
     * Suggests removing extra spaces surrounding a slash.
     *
     * @example
     * I just wanted to send a \{ reminder / follow-up  =\> reminder/follow-up \}.
     *
     * @defaultValue "on"
     */
    spacesSurroundingSlash?: "on" | "off";
    /**
     * Suggests alternatives to language related to human slavery.
     *
     * @example
     * My professor wrote a book about \{ slaves  =\> enslaved people \} in America.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageHumanRights?: "on" | "off";
    /**
     * Suggests alternatives to terms with origins in the institution of slavery.
     *
     * @example
     * The apartmentâ€™s \{ master  =\> main|primary \} bedroom has a view of the sea.
     *
     * @defaultValue "on"
     */
    possiblyBiasedLanguageHumanRightsRelated?: "on" | "off";
}

/**
 * Time in hours, minutes, and seconds.
 *
 * @remarks
 * Within {@link DocumentStats}, used by both `readingTime` and `speakingTime`.
 *
 * @public
 *
 */
declare interface Time {
    /** Hours */
    h: number;
    /** Minutes */
    m: number;
    /** Seconds */
    s: number;
}

/**
 * Position of the {@link https://developer.grammarly.com/docs/tone | tone detector} (if present) relative to the Grammarly button.
 *
 * @remarks
 * Used by {@link GrammarlyButtonElement}.
 *
 * @public
 */
declare type TonePosition = "left" | "right";

export { ClientId, Config, Dialect, DocumentStats, Domain, Editor, EditorConfig, EditorSDK, GrammarlyButtonElement, GrammarlyEditorPluginCallbacks, GrammarlyEditorPluginElement, GrammarlyEditorPluginElementEventMap, MenuPosition, SessionStats, SessionSuggestionBreakdown, SuggestionCategories, Time, TonePosition, init };
